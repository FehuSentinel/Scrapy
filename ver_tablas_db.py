import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import models
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv('.env')
load_dotenv('config.env', override=True)

# Conexi√≥n PostgreSQL
DB_USER = os.getenv('DB_USER', 'postgres')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'tu_contrase√±a')
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', '5432')
DB_NAME = os.getenv('DB_NAME', 'alquimia')

DATABASE_URL = f'postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}'
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

def ver_usuarios():
    """Muestra los usuarios en la base de datos con paginaci√≥n"""
    print("üë• USUARIOS EN LA BASE DE DATOS")
    print("=" * 60)
    
    usuarios = session.query(models.Usuario).all()
    
    if not usuarios:
        print("üì≠ No hay usuarios en la base de datos")
        return
    
    print(f"üìä Total de usuarios: {len(usuarios)}")
    
    # Configuraci√≥n de paginaci√≥n
    elementos_por_pagina = 10
    pagina_actual = 0
    total_paginas = (len(usuarios) + elementos_por_pagina - 1) // elementos_por_pagina
    
    while True:
        # Calcular √≠ndices de inicio y fin
        inicio = pagina_actual * elementos_por_pagina
        fin = min(inicio + elementos_por_pagina, len(usuarios))
        
        print(f"\nüìã P√°gina {pagina_actual + 1} de {total_paginas}")
        print("-" * 60)
        
        # Mostrar usuarios de la p√°gina actual
        for i in range(inicio, fin):
            usuario = usuarios[i]
            print(f"{i+1:3d}. {usuario.Nombre} {usuario.apellido}")
            print(f"     Email: {usuario.email}")
            print(f"     Direcci√≥n: {usuario.direccion}")
            print(f"     ID: {usuario.id_usuario}")
            print()
        
        # Mostrar opciones de navegaci√≥n
        print("=" * 60)
        if total_paginas > 1:
            if pagina_actual > 0:
                print("1. ‚¨ÖÔ∏è  P√°gina anterior")
            if pagina_actual < total_paginas - 1:
                print("2. ‚û°Ô∏è  P√°gina siguiente")
            print("3. üè† Volver al men√∫ de tablas")
            
            while True:
                opcion = input("\nSelecciona una opci√≥n: ").strip()
                
                if opcion == "1" and pagina_actual > 0:
                    pagina_actual -= 1
                    break
                elif opcion == "2" and pagina_actual < total_paginas - 1:
                    pagina_actual += 1
                    break
                elif opcion == "3":
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
        else:
            input("\nPresiona Enter para volver al men√∫ de tablas...")
            return

def ver_tiendas():
    """Muestra las tiendas en la base de datos con paginaci√≥n"""
    print("üè™ TIENDAS EN LA BASE DE DATOS")
    print("=" * 50)
    
    tiendas = session.query(models.Tienda).all()
    
    if not tiendas:
        print("üì≠ No hay tiendas en la base de datos")
        return
    
    print(f"üìä Total de tiendas: {len(tiendas)}")
    
    # Configuraci√≥n de paginaci√≥n
    elementos_por_pagina = 10
    pagina_actual = 0
    total_paginas = (len(tiendas) + elementos_por_pagina - 1) // elementos_por_pagina
    
    while True:
        # Calcular √≠ndices de inicio y fin
        inicio = pagina_actual * elementos_por_pagina
        fin = min(inicio + elementos_por_pagina, len(tiendas))
        
        print(f"\nüìã P√°gina {pagina_actual + 1} de {total_paginas}")
        print("-" * 50)
        
        # Mostrar tiendas de la p√°gina actual
        for i in range(inicio, fin):
            tienda = tiendas[i]
            print(f"   ID: {tienda.id_tienda} | Nombre: {tienda.nombre}")
            if tienda.direccion:
                print(f"        Direcci√≥n: {tienda.direccion}")
            if tienda.url:
                print(f"        URL: {tienda.url}")
            print()
        
        # Mostrar opciones de navegaci√≥n
        print("=" * 50)
        if total_paginas > 1:
            if pagina_actual > 0:
                print("1. ‚¨ÖÔ∏è  P√°gina anterior")
            if pagina_actual < total_paginas - 1:
                print("2. ‚û°Ô∏è  P√°gina siguiente")
            print("3. üè† Volver al men√∫ de tablas")
            
            while True:
                opcion = input("\nSelecciona una opci√≥n: ").strip()
                
                if opcion == "1" and pagina_actual > 0:
                    pagina_actual -= 1
                    break
                elif opcion == "2" and pagina_actual < total_paginas - 1:
                    pagina_actual += 1
                    break
                elif opcion == "3":
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
        else:
            input("\nPresiona Enter para volver al men√∫ de tablas...")
            return

def ver_productos():
    """Muestra los productos en la base de datos con paginaci√≥n"""
    print("üõçÔ∏è PRODUCTOS EN LA BASE DE DATOS")
    print("=" * 60)
    
    productos = session.query(models.Producto).all()
    
    if not productos:
        print("üì≠ No hay productos en la base de datos")
        return
    
    print(f"üìä Total de productos: {len(productos)}")
    
    # Configuraci√≥n de paginaci√≥n
    elementos_por_pagina = 10
    pagina_actual = 0
    total_paginas = (len(productos) + elementos_por_pagina - 1) // elementos_por_pagina
    
    while True:
        # Calcular √≠ndices de inicio y fin
        inicio = pagina_actual * elementos_por_pagina
        fin = min(inicio + elementos_por_pagina, len(productos))
        
        print(f"\nüìã P√°gina {pagina_actual + 1} de {total_paginas}")
        print("-" * 60)
        
        # Mostrar productos de la p√°gina actual
        for i in range(inicio, fin):
            producto = productos[i]
            print(f"{i+1:3d}. {producto.nombre[:50]}...")
            print(f"     Tienda: {producto.tienda}")
            print(f"     Marca: {producto.marca or 'N/A'}")
            print(f"     Precio: {producto.precio or 'N/A'}")
            print(f"     ID: {producto.id_producto}")
            print()
        
        # Mostrar opciones de navegaci√≥n
        print("=" * 60)
        if total_paginas > 1:
            if pagina_actual > 0:
                print("1. ‚¨ÖÔ∏è  P√°gina anterior")
            if pagina_actual < total_paginas - 1:
                print("2. ‚û°Ô∏è  P√°gina siguiente")
            print("3. üè† Volver al men√∫ de tablas")
            
            while True:
                opcion = input("\nSelecciona una opci√≥n: ").strip()
                
                if opcion == "1" and pagina_actual > 0:
                    pagina_actual -= 1
                    break
                elif opcion == "2" and pagina_actual < total_paginas - 1:
                    pagina_actual += 1
                    break
                elif opcion == "3":
                    # Mostrar estad√≠sticas antes de salir
                    mostrar_estadisticas_productos()
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
        else:
            # Mostrar estad√≠sticas si solo hay una p√°gina
            mostrar_estadisticas_productos()
            input("\nPresiona Enter para volver al men√∫ de tablas...")
            return

def mostrar_estadisticas_productos():
    """Muestra estad√≠sticas de productos por tienda"""
    print("\nüìà ESTAD√çSTICAS POR TIENDA:")
    print("-" * 30)
    
    from sqlalchemy import func
    stats = session.query(
        models.Producto.tienda,
        func.count(models.Producto.id_producto).label('cantidad')
    ).group_by(models.Producto.tienda).all()
    
    for tienda, cantidad in stats:
        print(f"   {tienda}: {cantidad} productos")

def mostrar_menu():
    """Muestra el men√∫ de opciones"""
    print("\n" + "="*50)
    print("    üóÑÔ∏è  VISOR DE TABLAS DE LA BASE DE DATOS")
    print("="*50)
    print("1. üë• Ver usuarios")
    print("2. üè™ Ver tiendas")
    print("3. üõçÔ∏è Ver productos")
    print("0. üö™ Volver al men√∫ principal")
    print("="*50)

def main():
    """Funci√≥n principal"""
    while True:
        mostrar_menu()
        
        try:
            opcion = input("\nSelecciona una opci√≥n (0-3): ").strip()
            
            if opcion == "1":
                ver_usuarios()
                input("\nPresiona Enter para continuar...")
                
            elif opcion == "2":
                ver_tiendas()
                input("\nPresiona Enter para continuar...")
                
            elif opcion == "3":
                ver_productos()
                input("\nPresiona Enter para continuar...")
                
            elif opcion == "0":
                print("\nüëã ¬°Volviendo al men√∫ principal!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Por favor, selecciona 0, 1, 2 o 3.")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Volviendo al men√∫ principal!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")

if __name__ == "__main__":
    main() 